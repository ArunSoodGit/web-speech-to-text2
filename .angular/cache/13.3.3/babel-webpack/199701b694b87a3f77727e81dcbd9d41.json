{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ServicePropertiesPropertyName } from \"../common.speech/Exports\";\nimport { PropertyId } from \"../sdk/Exports\";\nimport { QueryParameterNames } from \"./QueryParameterNames\";\nexport class ConnectionFactoryBase {\n  static getHostSuffix(region) {\n    if (!!region) {\n      if (region.toLowerCase().startsWith(\"china\")) {\n        return \".azure.cn\";\n      }\n\n      if (region.toLowerCase().startsWith(\"usgov\")) {\n        return \".azure.us\";\n      }\n    }\n\n    return \".microsoft.com\";\n  }\n\n  setCommonUrlParams(config, queryParams, endpoint) {\n    const propertyIdToParameterMap = new Map([[PropertyId.Speech_SegmentationSilenceTimeoutMs, QueryParameterNames.SegmentationSilenceTimeoutMs], [PropertyId.SpeechServiceConnection_EnableAudioLogging, QueryParameterNames.EnableAudioLogging], [PropertyId.SpeechServiceConnection_EndSilenceTimeoutMs, QueryParameterNames.EndSilenceTimeoutMs], [PropertyId.SpeechServiceConnection_InitialSilenceTimeoutMs, QueryParameterNames.InitialSilenceTimeoutMs], [PropertyId.SpeechServiceResponse_PostProcessingOption, QueryParameterNames.Postprocessing], [PropertyId.SpeechServiceResponse_ProfanityOption, QueryParameterNames.Profanity], [PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, QueryParameterNames.EnableWordLevelTimestamps], [PropertyId.SpeechServiceResponse_StablePartialResultThreshold, QueryParameterNames.StableIntermediateThreshold]]);\n    propertyIdToParameterMap.forEach((parameterName, propertyId) => {\n      this.setUrlParameter(propertyId, parameterName, config, queryParams, endpoint);\n    });\n    const serviceProperties = JSON.parse(config.parameters.getProperty(ServicePropertiesPropertyName, \"{}\"));\n    Object.keys(serviceProperties).forEach(value => {\n      queryParams[value] = serviceProperties[value];\n    });\n  }\n\n  setUrlParameter(propId, parameterName, config, queryParams, endpoint) {\n    const value = config.parameters.getProperty(propId, undefined);\n\n    if (value && (!endpoint || endpoint.search(parameterName) === -1)) {\n      queryParams[parameterName] = value.toLocaleLowerCase();\n    }\n  }\n\n} //# sourceMappingURL=ConnectionFactoryBase.js.map","map":null,"metadata":{},"sourceType":"module"}