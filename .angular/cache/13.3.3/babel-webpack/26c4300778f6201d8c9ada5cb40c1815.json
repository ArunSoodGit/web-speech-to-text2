{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n/* eslint-disable max-classes-per-file */\nimport { ProxyInfo, WebsocketConnection } from \"../common.browser/Exports\";\nimport { OutputFormatPropertyName } from \"../common.speech/Exports\";\nimport { DialogServiceConfig, OutputFormat, PropertyId } from \"../sdk/Exports\";\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\nimport { WebsocketMessageFormatter } from \"./Exports\";\nimport { HeaderNames } from \"./HeaderNames\";\nimport { QueryParameterNames } from \"./QueryParameterNames\";\nexport let DialogConnectionFactory = /*#__PURE__*/(() => {\n  class DialogConnectionFactory extends ConnectionFactoryBase {\n    create(config, authInfo, connectionId) {\n      const applicationId = config.parameters.getProperty(PropertyId.Conversation_ApplicationId, \"\");\n      const dialogType = config.parameters.getProperty(PropertyId.Conversation_DialogType);\n      const region = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region);\n      const language = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, \"en-US\");\n      const requestTurnStatus = config.parameters.getProperty(PropertyId.Conversation_Request_Bot_Status_Messages, \"true\");\n      const queryParams = {};\n      queryParams[HeaderNames.ConnectionId] = connectionId;\n      queryParams[QueryParameterNames.Format] = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\n      queryParams[QueryParameterNames.Language] = language;\n      queryParams[QueryParameterNames.RequestBotStatusMessages] = requestTurnStatus;\n\n      if (applicationId) {\n        queryParams[QueryParameterNames.BotId] = applicationId;\n\n        if (dialogType === DialogServiceConfig.DialogTypes.CustomCommands) {\n          queryParams[HeaderNames.CustomCommandsAppId] = applicationId;\n        }\n      }\n\n      const resourceInfix = dialogType === DialogServiceConfig.DialogTypes.CustomCommands ? \"commands/\" : \"\";\n      const version = dialogType === DialogServiceConfig.DialogTypes.CustomCommands ? \"v1\" : dialogType === DialogServiceConfig.DialogTypes.BotFramework ? \"v3\" : \"v0\";\n      const headers = {};\n\n      if (authInfo.token != null && authInfo.token !== \"\") {\n        headers[authInfo.headerName] = authInfo.token;\n      } // The URL used for connection is chosen in a priority order of specification:\n      //  1. If a custom endpoint is provided, that URL is used verbatim.\n      //  2. If a custom host is provided (e.g. \"wss://my.custom.endpoint.com:1123\"), a URL is constructed from it.\n      //  3. If no custom connection details are provided, a URL is constructed from default values.\n\n\n      let endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, \"\");\n\n      if (!endpoint) {\n        const hostSuffix = ConnectionFactoryBase.getHostSuffix(region);\n        const host = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, `wss://${region}.${DialogConnectionFactory.BaseUrl}${hostSuffix}`);\n        const standardizedHost = host.endsWith(\"/\") ? host : host + \"/\";\n        endpoint = `${standardizedHost}${resourceInfix}${DialogConnectionFactory.ApiKey}/${version}`;\n      }\n\n      this.setCommonUrlParams(config, queryParams, endpoint);\n      const enableCompression = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\n      return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\n    }\n\n  }\n\n  DialogConnectionFactory.ApiKey = \"api\";\n  DialogConnectionFactory.BaseUrl = \"convai.speech\"; //# sourceMappingURL=DialogConnectorFactory.js.map\n\n  return DialogConnectionFactory;\n})();","map":null,"metadata":{},"sourceType":"module"}