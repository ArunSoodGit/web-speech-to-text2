{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { ArgumentNullError, createNoDashGuid } from \"../common/Exports\";\nimport { WebsocketMessageAdapter } from \"./WebsocketMessageAdapter\";\nexport class WebsocketConnection {\n  constructor(uri, queryParameters, headers, messageFormatter, proxyInfo, enableCompression = false, connectionId) {\n    this.privIsDisposed = false;\n\n    if (!uri) {\n      throw new ArgumentNullError(\"uri\");\n    }\n\n    if (!messageFormatter) {\n      throw new ArgumentNullError(\"messageFormatter\");\n    }\n\n    this.privMessageFormatter = messageFormatter;\n    let queryParams = \"\";\n    let i = 0;\n\n    if (queryParameters) {\n      for (const paramName in queryParameters) {\n        if (paramName) {\n          queryParams += i === 0 && uri.indexOf(\"?\") === -1 ? \"?\" : \"&\";\n          const val = encodeURIComponent(queryParameters[paramName]);\n          queryParams += `${paramName}=${val}`;\n          i++;\n        }\n      }\n    }\n\n    if (headers) {\n      for (const headerName in headers) {\n        if (headerName) {\n          queryParams += i === 0 && uri.indexOf(\"?\") === -1 ? \"?\" : \"&\";\n          const val = encodeURIComponent(headers[headerName]);\n          queryParams += `${headerName}=${val}`;\n          i++;\n        }\n      }\n    }\n\n    this.privUri = uri + queryParams;\n    this.privId = connectionId ? connectionId : createNoDashGuid();\n    this.privConnectionMessageAdapter = new WebsocketMessageAdapter(this.privUri, this.id, this.privMessageFormatter, proxyInfo, headers, enableCompression);\n  }\n\n  dispose() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.privIsDisposed = true;\n\n      if (this.privConnectionMessageAdapter) {\n        yield this.privConnectionMessageAdapter.close();\n      }\n    });\n  }\n\n  isDisposed() {\n    return this.privIsDisposed;\n  }\n\n  get id() {\n    return this.privId;\n  }\n\n  state() {\n    return this.privConnectionMessageAdapter.state;\n  }\n\n  open() {\n    return this.privConnectionMessageAdapter.open();\n  }\n\n  send(message) {\n    return this.privConnectionMessageAdapter.send(message);\n  }\n\n  read() {\n    return this.privConnectionMessageAdapter.read();\n  }\n\n  get events() {\n    return this.privConnectionMessageAdapter.events;\n  }\n\n} //# sourceMappingURL=WebsocketConnection.js.map","map":null,"metadata":{},"sourceType":"module"}