{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { AddedLmIntent, IntentConnectionFactory, IntentServiceRecognizer, RecognitionMode, RecognizerConfig } from \"../common.speech/Exports\";\nimport { marshalPromiseToCallbacks } from \"../common/Exports\";\nimport { Contracts } from \"./Contracts\";\nimport { PropertyId, Recognizer } from \"./Exports\";\n/**\n * Intent recognizer.\n * @class\n */\n\nexport class IntentRecognizer extends Recognizer {\n  /**\n   * Initializes an instance of the IntentRecognizer.\n   * @constructor\n   * @param {SpeechConfig} speechConfig - The set of configuration properties.\n   * @param {AudioConfig} audioConfig - An optional audio input config associated with the recognizer\n   */\n  constructor(speechConfig, audioConfig) {\n    Contracts.throwIfNullOrUndefined(speechConfig, \"speechConfig\");\n    const configImpl = speechConfig;\n    Contracts.throwIfNullOrUndefined(configImpl, \"speechConfig\");\n    super(audioConfig, configImpl.properties, new IntentConnectionFactory());\n    this.privAddedIntents = [];\n    this.privAddedLmIntents = {};\n    this.privDisposedIntentRecognizer = false;\n    this.privProperties = configImpl.properties;\n    Contracts.throwIfNullOrWhitespace(this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage), PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\n  }\n  /**\n   * Gets the spoken language of recognition.\n   * @member IntentRecognizer.prototype.speechRecognitionLanguage\n   * @function\n   * @public\n   * @returns {string} the spoken language of recognition.\n   */\n\n\n  get speechRecognitionLanguage() {\n    Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\n    return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\n  }\n  /**\n   * Gets the authorization token used to communicate with the service.\n   * @member IntentRecognizer.prototype.authorizationToken\n   * @function\n   * @public\n   * @returns {string} Authorization token.\n   */\n\n\n  get authorizationToken() {\n    return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n  }\n  /**\n   * Gets/Sets the authorization token used to communicate with the service.\n   * Note: Please use a token derived from your LanguageUnderstanding subscription key for the Intent recognizer.\n   * @member IntentRecognizer.prototype.authorizationToken\n   * @function\n   * @public\n   * @param {string} value - Authorization token.\n   */\n\n\n  set authorizationToken(value) {\n    this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\n  }\n  /**\n   * The collection of properties and their values defined for this IntentRecognizer.\n   * @member IntentRecognizer.prototype.properties\n   * @function\n   * @public\n   * @returns {PropertyCollection} The collection of properties and their\n   * values defined for this IntentRecognizer.\n   */\n\n\n  get properties() {\n    return this.privProperties;\n  }\n  /**\n   * Starts intent recognition, and stops after the first utterance is recognized.\n   * The task returns the recognition text and intent as result.\n   * Note: RecognizeOnceAsync() returns when the first utterance has been recognized,\n   * so it is suitable only for single shot recognition like command or query.\n   * For long-running recognition, use StartContinuousRecognitionAsync() instead.\n   * @member IntentRecognizer.prototype.recognizeOnceAsync\n   * @function\n   * @public\n   * @param cb - Callback that received the recognition has finished with an IntentRecognitionResult.\n   * @param err - Callback invoked in case of an error.\n   */\n\n\n  recognizeOnceAsync(cb, err) {\n    Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\n\n    if (Object.keys(this.privAddedLmIntents).length !== 0 || undefined !== this.privUmbrellaIntent) {\n      const context = this.buildSpeechContext();\n      this.privReco.speechContext.setSection(\"intent\", context.Intent);\n      this.privReco.dynamicGrammar.addReferenceGrammar(context.ReferenceGrammars);\n      const intentReco = this.privReco;\n      intentReco.setIntents(this.privAddedLmIntents, this.privUmbrellaIntent);\n    }\n\n    marshalPromiseToCallbacks(this.recognizeOnceAsyncImpl(RecognitionMode.Interactive), cb, err);\n  }\n  /**\n   * Starts speech recognition, until stopContinuousRecognitionAsync() is called.\n   * User must subscribe to events to receive recognition results.\n   * @member IntentRecognizer.prototype.startContinuousRecognitionAsync\n   * @function\n   * @public\n   * @param cb - Callback invoked once the recognition has started.\n   * @param err - Callback invoked in case of an error.\n   */\n\n\n  startContinuousRecognitionAsync(cb, err) {\n    if (Object.keys(this.privAddedLmIntents).length !== 0 || undefined !== this.privUmbrellaIntent) {\n      const context = this.buildSpeechContext();\n      this.privReco.speechContext.setSection(\"intent\", context.Intent);\n      this.privReco.dynamicGrammar.addReferenceGrammar(context.ReferenceGrammars);\n      const intentReco = this.privReco;\n      intentReco.setIntents(this.privAddedLmIntents, this.privUmbrellaIntent);\n    }\n\n    marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\n  }\n  /**\n   * Stops continuous intent recognition.\n   * @member IntentRecognizer.prototype.stopContinuousRecognitionAsync\n   * @function\n   * @public\n   * @param cb - Callback invoked once the recognition has stopped.\n   * @param err - Callback invoked in case of an error.\n   */\n\n\n  stopContinuousRecognitionAsync(cb, err) {\n    marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\n  }\n  /**\n   * Starts speech recognition with keyword spotting, until stopKeywordRecognitionAsync() is called.\n   * User must subscribe to events to receive recognition results.\n   * Note: Key word spotting functionality is only available on the Speech Devices SDK.\n   * This functionality is currently not included in the SDK itself.\n   * @member IntentRecognizer.prototype.startKeywordRecognitionAsync\n   * @function\n   * @public\n   * @param {KeywordRecognitionModel} model - The keyword recognition model that specifies the keyword to be recognized.\n   * @param cb - Callback invoked once the recognition has started.\n   * @param err - Callback invoked in case of an error.\n   */\n\n\n  startKeywordRecognitionAsync(model, cb, err) {\n    Contracts.throwIfNull(model, \"model\");\n\n    if (!!err) {\n      err(\"Not yet implemented.\");\n    }\n  }\n  /**\n   * Stops continuous speech recognition.\n   * Note: Key word spotting functionality is only available on the Speech Devices SDK.\n   * This functionality is currently not included in the SDK itself.\n   * @member IntentRecognizer.prototype.stopKeywordRecognitionAsync\n   * @function\n   * @public\n   * @param cb - Callback invoked once the recognition has stopped.\n   * @param err - Callback invoked in case of an error.\n   */\n\n\n  stopKeywordRecognitionAsync(cb, err) {\n    if (!!cb) {\n      try {\n        cb();\n      } catch (e) {\n        if (!!err) {\n          err(e);\n        }\n      }\n    }\n  }\n  /**\n   * Adds a phrase that should be recognized as intent.\n   * @member IntentRecognizer.prototype.addIntent\n   * @function\n   * @public\n   * @param {string} intentId - A String that represents the identifier of the intent to be recognized.\n   * @param {string} phrase - A String that specifies the phrase representing the intent.\n   */\n\n\n  addIntent(simplePhrase, intentId) {\n    Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\n    Contracts.throwIfNullOrWhitespace(intentId, \"intentId\");\n    Contracts.throwIfNullOrWhitespace(simplePhrase, \"simplePhrase\");\n    this.privAddedIntents.push([intentId, simplePhrase]);\n  }\n  /**\n   * Adds an intent from Language Understanding service for recognition.\n   * @member IntentRecognizer.prototype.addIntentWithLanguageModel\n   * @function\n   * @public\n   * @param {string} intentId - A String that represents the identifier of the intent\n   * to be recognized. Ignored if intentName is empty.\n   * @param {string} model - The intent model from Language Understanding service.\n   * @param {string} intentName - The intent name defined in the intent model. If it\n   * is empty, all intent names defined in the model will be added.\n   */\n\n\n  addIntentWithLanguageModel(intentId, model, intentName) {\n    Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\n    Contracts.throwIfNullOrWhitespace(intentId, \"intentId\");\n    Contracts.throwIfNull(model, \"model\");\n    const modelImpl = model;\n    Contracts.throwIfNullOrWhitespace(modelImpl.appId, \"model.appId\");\n    this.privAddedLmIntents[intentId] = new AddedLmIntent(modelImpl, intentName);\n  }\n  /**\n   * @summary Adds all intents from the specified Language Understanding Model.\n   * @member IntentRecognizer.prototype.addAllIntents\n   * @function\n   * @public\n   * @function\n   * @public\n   * @param {LanguageUnderstandingModel} model - The language understanding model containing the intents.\n   * @param {string} intentId - A custom id String to be returned in the IntentRecognitionResult's getIntentId() method.\n   */\n\n\n  addAllIntents(model, intentId) {\n    Contracts.throwIfNull(model, \"model\");\n    const modelImpl = model;\n    Contracts.throwIfNullOrWhitespace(modelImpl.appId, \"model.appId\");\n    this.privUmbrellaIntent = new AddedLmIntent(modelImpl, intentId);\n  }\n  /**\n   * closes all external resources held by an instance of this class.\n   * @member IntentRecognizer.prototype.close\n   * @function\n   * @public\n   */\n\n\n  close(cb, errorCb) {\n    Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\n    marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\n  }\n\n  createRecognizerConfig(speechConfig) {\n    return new RecognizerConfig(speechConfig, this.properties);\n  }\n\n  createServiceRecognizer(authentication, connectionFactory, audioConfig, recognizerConfig) {\n    const audioImpl = audioConfig;\n    return new IntentServiceRecognizer(authentication, connectionFactory, audioImpl, recognizerConfig, this);\n  }\n\n  dispose(disposing) {\n    const _super = Object.create(null, {\n      dispose: {\n        get: () => super.dispose\n      }\n    });\n\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.privDisposedIntentRecognizer) {\n        return;\n      }\n\n      if (disposing) {\n        this.privDisposedIntentRecognizer = true;\n        yield _super.dispose.call(this, disposing);\n      }\n    });\n  }\n\n  buildSpeechContext() {\n    let appId;\n    let region;\n    let subscriptionKey;\n    const refGrammers = [];\n\n    if (undefined !== this.privUmbrellaIntent) {\n      appId = this.privUmbrellaIntent.modelImpl.appId;\n      region = this.privUmbrellaIntent.modelImpl.region;\n      subscriptionKey = this.privUmbrellaIntent.modelImpl.subscriptionKey;\n    } // Build the reference grammer array.\n\n\n    for (const intentId of Object.keys(this.privAddedLmIntents)) {\n      const addedLmIntent = this.privAddedLmIntents[intentId]; // validate all the same model, region, and key...\n\n      if (appId === undefined) {\n        appId = addedLmIntent.modelImpl.appId;\n      } else {\n        if (appId !== addedLmIntent.modelImpl.appId) {\n          throw new Error(\"Intents must all be from the same LUIS model\");\n        }\n      }\n\n      if (region === undefined) {\n        region = addedLmIntent.modelImpl.region;\n      } else {\n        if (region !== addedLmIntent.modelImpl.region) {\n          throw new Error(\"Intents must all be from the same LUIS model in a single region\");\n        }\n      }\n\n      if (subscriptionKey === undefined) {\n        subscriptionKey = addedLmIntent.modelImpl.subscriptionKey;\n      } else {\n        if (subscriptionKey !== addedLmIntent.modelImpl.subscriptionKey) {\n          throw new Error(\"Intents must all use the same subscription key\");\n        }\n      }\n\n      const grammer = \"luis/\" + appId + \"-PRODUCTION#\" + intentId;\n      refGrammers.push(grammer);\n    }\n\n    return {\n      Intent: {\n        id: appId,\n        key: subscriptionKey === undefined ? this.privProperties.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key]) : subscriptionKey,\n        provider: \"LUIS\"\n      },\n      ReferenceGrammars: undefined === this.privUmbrellaIntent ? refGrammers : [\"luis/\" + appId + \"-PRODUCTION\"]\n    };\n  }\n\n} //# sourceMappingURL=IntentRecognizer.js.map","map":null,"metadata":{},"sourceType":"module"}