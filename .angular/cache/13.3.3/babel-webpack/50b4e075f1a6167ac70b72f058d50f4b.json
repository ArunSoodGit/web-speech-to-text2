{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n/* eslint-disable max-classes-per-file */\nimport { Contracts } from \"./Contracts\";\nimport { PropertyId, SpeechConfigImpl } from \"./Exports\";\n/**\n * Class that defines base configurations for dialog service connector\n * @class DialogServiceConfig\n */\n\nexport class DialogServiceConfig {\n  /**\n   * Creates an instance of DialogService config.\n   * @constructor\n   */\n  constructor() {\n    return;\n  }\n  /**\n   * Sets the corresponding backend application identifier.\n   * @member DialogServiceConfig.prototype.Conversation_ApplicationId\n   * @function\n   * @public\n   * @param {string} value - The application identifier to set.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n\n\n  set applicationId(value) {}\n\n  static get DialogTypes() {\n    return {\n      BotFramework: \"bot_framework\",\n      CustomCommands: \"custom_commands\"\n    };\n  }\n\n}\n/**\n * Dialog Service configuration.\n * @class DialogServiceConfigImpl\n */\n\nexport class DialogServiceConfigImpl extends DialogServiceConfig {\n  /**\n   * Creates an instance of dialogService config.\n   */\n  constructor() {\n    super();\n    this.privSpeechConfig = new SpeechConfigImpl();\n  }\n  /**\n   * Provides access to custom properties.\n   * @member DialogServiceConfigImpl.prototype.properties\n   * @function\n   * @public\n   * @returns {PropertyCollection} The properties.\n   */\n\n\n  get properties() {\n    return this.privSpeechConfig.properties;\n  }\n  /**\n   * Gets the speech recognition language.\n   * @member DialogServiceConfigImpl.prototype.speechRecognitionLanguage\n   * @function\n   * @public\n   */\n\n\n  get speechRecognitionLanguage() {\n    return this.privSpeechConfig.speechRecognitionLanguage;\n  }\n  /**\n   * Sets the speech recognition language.\n   * @member DialogServiceConfigImpl.prototype.speechRecognitionLanguage\n   * @function\n   * @public\n   * @param {string} value - The language to set.\n   */\n\n\n  set speechRecognitionLanguage(value) {\n    Contracts.throwIfNullOrWhitespace(value, \"value\");\n    this.privSpeechConfig.speechRecognitionLanguage = value;\n  }\n\n  get outputFormat() {\n    return this.privSpeechConfig.outputFormat;\n  }\n\n  set outputFormat(value) {\n    this.privSpeechConfig.outputFormat = value;\n  }\n  /**\n   * Sets a named property as value\n   * @member DialogServiceConfigImpl.prototype.setProperty\n   * @function\n   * @public\n   * @param {PropertyId | string} name - The property to set.\n   * @param {string} value - The value.\n   */\n\n\n  setProperty(name, value) {\n    this.privSpeechConfig.setProperty(name, value);\n  }\n  /**\n   * Sets a named property as value\n   * @member DialogServiceConfigImpl.prototype.getProperty\n   * @function\n   * @public\n   * @param {PropertyId | string} name - The property to get.\n   * @param {string} def - The default value to return in case the property is not known.\n   * @returns {string} The current value, or provided default, of the given property.\n   */\n\n\n  getProperty(name, def) {\n    void def;\n    return this.privSpeechConfig.getProperty(name);\n  }\n  /**\n   * Sets the proxy configuration.\n   * Only relevant in Node.js environments.\n   * Added in version 1.4.0.\n   * @param proxyHostName The host name of the proxy server, without the protocol scheme (http://)\n   * @param proxyPort The port number of the proxy server.\n   * @param proxyUserName The user name of the proxy server.\n   * @param proxyPassword The password of the proxy server.\n   */\n\n\n  setProxy(proxyHostName, proxyPort, proxyUserName, proxyPassword) {\n    this.setProperty(PropertyId.SpeechServiceConnection_ProxyHostName, proxyHostName);\n    this.setProperty(PropertyId.SpeechServiceConnection_ProxyPort, `${proxyPort}`);\n\n    if (proxyUserName) {\n      this.setProperty(PropertyId.SpeechServiceConnection_ProxyUserName, proxyUserName);\n    }\n\n    if (proxyPassword) {\n      this.setProperty(PropertyId.SpeechServiceConnection_ProxyPassword, proxyPassword);\n    }\n  }\n\n  setServiceProperty(name, value, channel) {\n    void channel;\n    this.privSpeechConfig.setServiceProperty(name, value);\n  }\n  /**\n   * Dispose of associated resources.\n   * @member DialogServiceConfigImpl.prototype.close\n   * @function\n   * @public\n   */\n\n\n  close() {\n    return;\n  }\n\n} //# sourceMappingURL=DialogServiceConfig.js.map","map":null,"metadata":{},"sourceType":"module"}