{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ProxyInfo, WebsocketConnection } from \"../common.browser/Exports\";\nimport { ForceDictationPropertyName, OutputFormatPropertyName } from \"../common.speech/Exports\";\nimport { OutputFormat, PropertyId } from \"../sdk/Exports\";\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\nimport { RecognitionMode, WebsocketMessageFormatter } from \"./Exports\";\nimport { HeaderNames } from \"./HeaderNames\";\nimport { QueryParameterNames } from \"./QueryParameterNames\";\nexport class SpeechConnectionFactory extends ConnectionFactoryBase {\n  constructor() {\n    super(...arguments);\n    this.interactiveRelativeUri = \"/speech/recognition/interactive/cognitiveservices/v1\";\n    this.conversationRelativeUri = \"/speech/recognition/conversation/cognitiveservices/v1\";\n    this.dictationRelativeUri = \"/speech/recognition/dictation/cognitiveservices/v1\";\n    this.universalUri = \"/speech/universal/v\";\n  }\n\n  create(config, authInfo, connectionId) {\n    let endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\n    const region = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\n    const hostSuffix = ConnectionFactoryBase.getHostSuffix(region);\n    const host = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".stt.speech\" + hostSuffix);\n    const queryParams = {};\n    const endpointId = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\n    const language = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\n\n    if (endpointId) {\n      if (!endpoint || endpoint.search(QueryParameterNames.CustomSpeechDeploymentId) === -1) {\n        queryParams[QueryParameterNames.CustomSpeechDeploymentId] = endpointId;\n      }\n    } else if (language) {\n      if (!endpoint || endpoint.search(QueryParameterNames.Language) === -1) {\n        queryParams[QueryParameterNames.Language] = language;\n      }\n    }\n\n    if (!endpoint || endpoint.search(QueryParameterNames.Format) === -1) {\n      queryParams[QueryParameterNames.Format] = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\n    }\n\n    if (config.autoDetectSourceLanguages !== undefined) {\n      queryParams[QueryParameterNames.EnableLanguageId] = \"true\";\n    }\n\n    this.setCommonUrlParams(config, queryParams, endpoint);\n\n    if (!endpoint) {\n      switch (config.recognitionMode) {\n        case RecognitionMode.Conversation:\n          if (config.parameters.getProperty(ForceDictationPropertyName, \"false\") === \"true\") {\n            endpoint = host + this.dictationRelativeUri;\n          } else {\n            if (config.recognitionEndpointVersion !== undefined && parseInt(config.recognitionEndpointVersion, 10) > 1) {\n              endpoint = `${host}${this.universalUri}${config.recognitionEndpointVersion}`;\n            } else {\n              endpoint = host + this.conversationRelativeUri;\n            }\n          }\n\n          break;\n\n        case RecognitionMode.Dictation:\n          endpoint = host + this.dictationRelativeUri;\n          break;\n\n        default:\n          if (config.recognitionEndpointVersion !== undefined && parseInt(config.recognitionEndpointVersion, 10) > 1) {\n            endpoint = `${host}${this.universalUri}${config.recognitionEndpointVersion}`;\n          } else {\n            endpoint = host + this.interactiveRelativeUri; // default is interactive\n          }\n\n          break;\n      }\n    }\n\n    const headers = {};\n\n    if (authInfo.token !== undefined && authInfo.token !== \"\") {\n      headers[authInfo.headerName] = authInfo.token;\n    }\n\n    headers[HeaderNames.ConnectionId] = connectionId;\n    config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\n    const enableCompression = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\n    return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\n  }\n\n} //# sourceMappingURL=SpeechConnectionFactory.js.map","map":null,"metadata":{},"sourceType":"module"}