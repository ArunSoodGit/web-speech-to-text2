{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { connectivity, type } from \"../common.speech/Exports\";\nimport { AudioSourceErrorEvent, AudioSourceInitializingEvent, AudioSourceOffEvent, AudioSourceReadyEvent, AudioStreamNodeAttachedEvent, AudioStreamNodeAttachingEvent, AudioStreamNodeDetachedEvent, AudioStreamNodeErrorEvent, ChunkedArrayBufferStream, createNoDashGuid, Deferred, Events, EventSource } from \"../common/Exports\";\nimport { AudioStreamFormat } from \"../sdk/Audio/AudioStreamFormat\";\nexport class FileAudioSource {\n  constructor(file, filename, audioSourceId) {\n    this.privStreams = {};\n    this.privHeaderEnd = 44;\n    this.privId = audioSourceId ? audioSourceId : createNoDashGuid();\n    this.privEvents = new EventSource();\n    this.privSource = file;\n\n    if (typeof window !== \"undefined\" && typeof Blob !== \"undefined\" && this.privSource instanceof Blob) {\n      this.privFilename = file.name;\n    } else {\n      this.privFilename = filename || \"unknown.wav\";\n    } // Read the header.\n\n\n    this.privAudioFormatPromise = this.readHeader();\n  }\n\n  get format() {\n    return this.privAudioFormatPromise;\n  }\n\n  get blob() {\n    return Promise.resolve(this.privSource);\n  }\n\n  turnOn() {\n    if (this.privFilename.lastIndexOf(\".wav\") !== this.privFilename.length - 4) {\n      const errorMsg = this.privFilename + \" is not supported. Only WAVE files are allowed at the moment.\";\n      this.onEvent(new AudioSourceErrorEvent(errorMsg, \"\"));\n      return Promise.reject(errorMsg);\n    }\n\n    this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\n\n    this.onEvent(new AudioSourceReadyEvent(this.privId));\n    return;\n  }\n\n  id() {\n    return this.privId;\n  }\n\n  attach(audioNodeId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\n      const stream = yield this.upload(audioNodeId);\n      this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\n      return Promise.resolve({\n        detach: () => __awaiter(this, void 0, void 0, function* () {\n          stream.readEnded();\n          delete this.privStreams[audioNodeId];\n          this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\n          yield this.turnOff();\n        }),\n        id: () => audioNodeId,\n        read: () => stream.read()\n      });\n    });\n  }\n\n  detach(audioNodeId) {\n    if (audioNodeId && this.privStreams[audioNodeId]) {\n      this.privStreams[audioNodeId].close();\n      delete this.privStreams[audioNodeId];\n      this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\n    }\n  }\n\n  turnOff() {\n    for (const streamId in this.privStreams) {\n      if (streamId) {\n        const stream = this.privStreams[streamId];\n\n        if (stream && !stream.isClosed) {\n          stream.close();\n        }\n      }\n    }\n\n    this.onEvent(new AudioSourceOffEvent(this.privId)); // no stream now\n\n    return Promise.resolve();\n  }\n\n  get events() {\n    return this.privEvents;\n  }\n\n  get deviceInfo() {\n    return this.privAudioFormatPromise.then(result => Promise.resolve({\n      bitspersample: result.bitsPerSample,\n      channelcount: result.channels,\n      connectivity: connectivity.Unknown,\n      manufacturer: \"Speech SDK\",\n      model: \"File\",\n      samplerate: result.samplesPerSec,\n      type: type.File\n    }));\n  }\n\n  readHeader() {\n    // Read the wave header.\n    const maxHeaderSize = 512;\n    const header = this.privSource.slice(0, maxHeaderSize);\n    const headerResult = new Deferred();\n\n    const processHeader = header => {\n      const view = new DataView(header);\n\n      const getWord = index => String.fromCharCode(view.getUint8(index), view.getUint8(index + 1), view.getUint8(index + 2), view.getUint8(index + 3)); // RIFF 4 bytes.\n\n\n      if (\"RIFF\" !== getWord(0)) {\n        headerResult.reject(\"Invalid WAV header in file, RIFF was not found\");\n        return;\n      } // length, 4 bytes\n      // RIFF Type & fmt 8 bytes\n\n\n      if (\"WAVE\" !== getWord(8) || \"fmt \" !== getWord(12)) {\n        headerResult.reject(\"Invalid WAV header in file, WAVEfmt was not found\");\n        return;\n      }\n\n      const formatSize = view.getInt32(16, true);\n      const channelCount = view.getUint16(22, true);\n      const sampleRate = view.getUint32(24, true);\n      const bitsPerSample = view.getUint16(34, true); // Confirm if header is 44 bytes long.\n\n      let pos = 36 + Math.max(formatSize - 16, 0);\n\n      for (; getWord(pos) !== \"data\"; pos += 2) {\n        if (pos > maxHeaderSize - 8) {\n          headerResult.reject(\"Invalid WAV header in file, data block was not found\");\n          return;\n        }\n      }\n\n      this.privHeaderEnd = pos + 8;\n      headerResult.resolve(AudioStreamFormat.getWaveFormatPCM(sampleRate, bitsPerSample, channelCount));\n    };\n\n    if (typeof window !== \"undefined\" && typeof Blob !== \"undefined\" && header instanceof Blob) {\n      const reader = new FileReader();\n\n      reader.onload = event => {\n        const header = event.target.result;\n        processHeader(header);\n      };\n\n      reader.readAsArrayBuffer(header);\n    } else {\n      const h = header;\n      processHeader(h.buffer.slice(h.byteOffset, h.byteOffset + h.byteLength));\n    }\n\n    return headerResult.promise;\n  }\n\n  upload(audioNodeId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const onerror = error => {\n        const errorMsg = `Error occurred while processing '${this.privFilename}'. ${error}`;\n        this.onEvent(new AudioStreamNodeErrorEvent(this.privId, audioNodeId, errorMsg));\n        throw new Error(errorMsg);\n      };\n\n      try {\n        yield this.turnOn();\n        const format = yield this.privAudioFormatPromise;\n        const stream = new ChunkedArrayBufferStream(format.avgBytesPerSec / 10, audioNodeId);\n        this.privStreams[audioNodeId] = stream;\n        const chunk = this.privSource.slice(this.privHeaderEnd);\n\n        const processFile = buff => {\n          if (stream.isClosed) {\n            return; // output stream was closed (somebody called TurnOff). We're done here.\n          }\n\n          stream.writeStreamChunk({\n            buffer: buff,\n            isEnd: false,\n            timeReceived: Date.now()\n          });\n          stream.close();\n        };\n\n        if (typeof window !== \"undefined\" && typeof Blob !== \"undefined\" && chunk instanceof Blob) {\n          const reader = new FileReader();\n\n          reader.onerror = ev => onerror(ev.toString());\n\n          reader.onload = event => {\n            const fileBuffer = event.target.result;\n            processFile(fileBuffer);\n          };\n\n          reader.readAsArrayBuffer(chunk);\n        } else {\n          const c = chunk;\n          processFile(c.buffer.slice(c.byteOffset, c.byteOffset + c.byteLength));\n        }\n\n        return stream;\n      } catch (e) {\n        onerror(e);\n      }\n    });\n  }\n\n  onEvent(event) {\n    this.privEvents.onEvent(event);\n    Events.instance.onEvent(event);\n  }\n\n} //# sourceMappingURL=FileAudioSource.js.map","map":null,"metadata":{},"sourceType":"module"}