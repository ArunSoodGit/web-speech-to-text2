{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport * as fs from \"fs\";\nimport { LogLevel } from \"../sdk/LogLevel\";\nimport { Contracts } from \"../sdk/Contracts\";\nexport class ConsoleLoggingListener {\n  constructor(logLevelFilter = LogLevel.None) {\n    this.privLogPath = undefined;\n    this.privLogLevelFilter = logLevelFilter;\n  }\n\n  set logPath(path) {\n    Contracts.throwIfNullOrUndefined(fs.openSync, \"\\nFile System access not available\");\n    this.privLogPath = path;\n  }\n\n  onEvent(event) {\n    if (event.eventType >= this.privLogLevelFilter) {\n      const log = this.toString(event);\n\n      if (!!this.privLogPath) {\n        fs.writeFileSync(this.privLogPath, log + \"\\n\", {\n          flag: \"a+\"\n        });\n      }\n\n      switch (event.eventType) {\n        case LogLevel.Debug:\n          // eslint-disable-next-line no-console\n          console.debug(log);\n          break;\n\n        case LogLevel.Info:\n          // eslint-disable-next-line no-console\n          console.info(log);\n          break;\n\n        case LogLevel.Warning:\n          // eslint-disable-next-line no-console\n          console.warn(log);\n          break;\n\n        case LogLevel.Error:\n          // eslint-disable-next-line no-console\n          console.error(log);\n          break;\n\n        default:\n          // eslint-disable-next-line no-console\n          console.log(log);\n          break;\n      }\n    }\n  }\n\n  toString(event) {\n    const logFragments = [`${event.eventTime}`, `${event.name}`];\n    const e = event;\n\n    for (const prop in e) {\n      if (prop && event.hasOwnProperty(prop) && prop !== \"eventTime\" && prop !== \"eventType\" && prop !== \"eventId\" && prop !== \"name\" && prop !== \"constructor\") {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        const value = e[prop];\n        let valueToLog = \"<NULL>\";\n\n        if (value !== undefined && value !== null) {\n          if (typeof value === \"number\" || typeof value === \"string\") {\n            valueToLog = value.toString();\n          } else {\n            valueToLog = JSON.stringify(value);\n          }\n        }\n\n        logFragments.push(`${prop}: ${valueToLog}`);\n      }\n    }\n\n    return logFragments.join(\" | \");\n  }\n\n} //# sourceMappingURL=ConsoleLoggingListener.js.map","map":null,"metadata":{},"sourceType":"module"}