{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { PropertyCollection } from \"./Exports\";\n/**\n * Represents collection of parameters and their values.\n * @class Translations\n */\n\nexport class Translations {\n  constructor() {\n    // Use an PropertyCollection internally, just wrapping it to hide the | enum syntax it has.\n    this.privMap = new PropertyCollection();\n  }\n  /**\n   * Get the languages in the object in a String array.\n   * @member Translations.prototype.languages\n   * @function\n   * @public\n   * @returns {string[]} languages in translations object.\n   */\n\n\n  get languages() {\n    return this.privMap.keys;\n  }\n  /**\n   * Returns the parameter value in type String. The parameter must have the same type as String.\n   * Currently only String, int and bool are allowed.\n   * If the name is not available, the specified defaultValue is returned.\n   * @member Translations.prototype.get\n   * @function\n   * @public\n   * @param {string} key - The parameter name.\n   * @param {string} def - The default value which is returned if the parameter is not available in the collection.\n   * @returns {string} value of the parameter.\n   */\n\n\n  get(key, def) {\n    return this.privMap.getProperty(key, def);\n  }\n  /**\n   * Sets the String value of the parameter specified by name.\n   * @member Translations.prototype.set\n   * @function\n   * @public\n   * @param {string} key - The parameter name.\n   * @param {string} value - The value of the parameter.\n   */\n\n\n  set(key, value) {\n    this.privMap.setProperty(key, value);\n  }\n\n} //# sourceMappingURL=Translations.js.map","map":null,"metadata":{},"sourceType":"module"}