{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { Context, OS, SpeakerIdMessageAdapter, SpeakerRecognitionConfig } from \"../common.speech/Exports\";\nimport { Contracts } from \"./Contracts\";\nimport { PropertyId, ResultReason, VoiceProfile, VoiceProfileEnrollmentResult, VoiceProfilePhraseResult, VoiceProfileResult, VoiceProfileType } from \"./Exports\";\n/**\n * Defines VoiceProfileClient class for Speaker Recognition\n * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)\n * @class VoiceProfileClient\n */\n\nexport class VoiceProfileClient {\n  /**\n   * VoiceProfileClient constructor.\n   * @constructor\n   * @param {SpeechConfig} speechConfig - An set of initial properties for this synthesizer (authentication key, region, &c)\n   */\n  constructor(speechConfig) {\n    const speechConfigImpl = speechConfig;\n    Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\n    this.privProperties = speechConfigImpl.properties.clone();\n    this.implClientSetup();\n  }\n  /**\n   * The collection of properties and their values defined for this VoiceProfileClient.\n   * @member VoiceProfileClient.prototype.properties\n   * @function\n   * @public\n   * @returns {PropertyCollection} The collection of properties and their values defined for this VoiceProfileClient.\n   */\n\n\n  get properties() {\n    return this.privProperties;\n  }\n  /**\n   * Gets the authorization token used to communicate with the service.\n   * @member VoiceProfileClient.prototype.authorizationToken\n   * @function\n   * @public\n   * @returns {string} Authorization token.\n   */\n\n\n  get authorizationToken() {\n    return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n  }\n  /**\n   * Gets/Sets the authorization token used to communicate with the service.\n   * @member VoiceProfileClient.prototype.authorizationToken\n   * @function\n   * @public\n   * @param {string} token - Authorization token.\n   */\n\n\n  set authorizationToken(token) {\n    Contracts.throwIfNullOrWhitespace(token, \"token\");\n    this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\n  }\n  /**\n   * Create a speaker recognition voice profile\n   * @member VoiceProfileClient.prototype.createProfileAsync\n   * @function\n   * @public\n   * @async\n   * @param {VoiceProfileType} profileType Type of Voice Profile to be created\n   * @param {string} lang Language string (locale) for Voice Profile\n   * @return {Promise<VoiceProfile>} - Promise of a VoiceProfile.\n   */\n\n\n  createProfileAsync(profileType, lang) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = yield this.privAdapter.createProfile(profileType, lang);\n\n      if (!result.ok) {\n        throw new Error(`createProfileAsync failed with code: ${result.status}, message: ${result.statusText}`);\n      }\n\n      const response = result.json;\n      const profile = new VoiceProfile(response.profileId, profileType);\n      return profile;\n    });\n  }\n  /**\n   * Get current information of a voice profile\n   * @member VoiceProfileClient.prototype.retrieveEnrollmentResultAsync\n   * @function\n   * @public\n   * @async\n   * @param {VoiceProfile} profile Voice Profile to retrieve info for\n   * @return {Promise<VoiceProfileEnrollmentResult>} - Promise of a VoiceProfileEnrollmentResult.\n   */\n\n\n  retrieveEnrollmentResultAsync(profile) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = yield this.privAdapter.getProfileStatus(profile);\n      return new VoiceProfileEnrollmentResult(result.ok ? ResultReason.EnrolledVoiceProfile : ResultReason.Canceled, result.data, result.statusText);\n    });\n  }\n  /**\n   * Get all voice profiles on account with given voice profile type\n   * @member VoiceProfileClient.prototype.getAllProfilesAsync\n   * @function\n   * @public\n   * @async\n   * @param {VoiceProfileType} profileType profile type (identification/verification) for which to list profiles\n   * @return {Promise<VoiceProfileEnrollmentResult[]>} - Promise of an array of VoiceProfileEnrollmentResults.\n   */\n\n\n  getAllProfilesAsync(profileType) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = yield this.privAdapter.getProfiles(profileType);\n\n      if (profileType === VoiceProfileType.TextIndependentIdentification) {\n        return VoiceProfileEnrollmentResult.FromIdentificationProfileList(result.json);\n      }\n\n      return VoiceProfileEnrollmentResult.FromVerificationProfileList(result.json);\n    });\n  }\n  /**\n   * Get valid authorization phrases for voice profile enrollment\n   * @member VoiceProfileClient.prototype.getAuthorizationPhrasesAsync\n   * @function\n   * @public\n   * @async\n   * @param {VoiceProfileType} profileType Profile Type to get activation phrases for\n   * @param {string} lang Language string (locale) for Voice Profile\n   */\n\n\n  getActivationPhrasesAsync(profileType, lang) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = yield this.privAdapter.getPhrases(profileType, lang);\n      return new VoiceProfilePhraseResult(result.ok ? ResultReason.EnrollingVoiceProfile : ResultReason.Canceled, result.statusText, result.json);\n    });\n  }\n  /**\n   * Create a speaker recognition voice profile\n   * @member VoiceProfileClient.prototype.enrollProfileAsync\n   * @function\n   * @public\n   * @async\n   * @param {VoiceProfile} profile Voice Profile to create enrollment for\n   * @param {AudioConfig} audioConfig source info from which to create enrollment\n   * @return {Promise<VoiceProfileEnrollmentResult>} - Promise of a VoiceProfileEnrollmentResult.\n   */\n\n\n  enrollProfileAsync(profile, audioConfig) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const configImpl = audioConfig;\n      Contracts.throwIfNullOrUndefined(configImpl, \"audioConfig\");\n      const result = yield this.privAdapter.createEnrollment(profile, configImpl);\n      return new VoiceProfileEnrollmentResult(result.ok ? ResultReason.EnrolledVoiceProfile : ResultReason.Canceled, result.data, result.statusText);\n    });\n  }\n  /**\n   * Delete a speaker recognition voice profile\n   * @member VoiceProfileClient.prototype.deleteProfileAsync\n   * @function\n   * @public\n   * @async\n   * @param {VoiceProfile} profile Voice Profile to be deleted\n   * @return {Promise<VoiceProfileResult>} - Promise of a VoiceProfileResult.\n   */\n\n\n  deleteProfileAsync(profile) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = yield this.privAdapter.deleteProfile(profile);\n      return this.getResult(result, ResultReason.DeletedVoiceProfile);\n    });\n  }\n  /**\n   * Remove all enrollments for a speaker recognition voice profile\n   * @member VoiceProfileClient.prototype.resetProfileAsync\n   * @function\n   * @public\n   * @async\n   * @param {VoiceProfile} profile Voice Profile to be reset\n   * @return {Promise<VoiceProfileResult>} - Promise of a VoiceProfileResult.\n   */\n\n\n  resetProfileAsync(profile) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = yield this.privAdapter.resetProfile(profile);\n      return this.getResult(result, ResultReason.ResetVoiceProfile);\n    });\n  }\n  /**\n   * Included for compatibility\n   * @member VoiceProfileClient.prototype.close\n   * @function\n   * @public\n   */\n\n\n  close() {\n    return;\n  } // Does class setup, swiped from Recognizer.\n\n\n  implClientSetup() {\n    let osPlatform = typeof window !== \"undefined\" ? \"Browser\" : \"Node\";\n    let osName = \"unknown\";\n    let osVersion = \"unknown\";\n\n    if (typeof navigator !== \"undefined\") {\n      osPlatform = osPlatform + \"/\" + navigator.platform;\n      osName = navigator.userAgent;\n      osVersion = navigator.appVersion;\n    }\n\n    const recognizerConfig = new SpeakerRecognitionConfig(new Context(new OS(osPlatform, osName, osVersion)), this.privProperties);\n    this.privAdapter = new SpeakerIdMessageAdapter(recognizerConfig);\n  }\n\n  getResult(result, successReason) {\n    const response = new VoiceProfileResult(result.ok ? successReason : ResultReason.Canceled, result.statusText);\n    return response;\n  }\n\n} //# sourceMappingURL=VoiceProfileClient.js.map","map":null,"metadata":{},"sourceType":"module"}