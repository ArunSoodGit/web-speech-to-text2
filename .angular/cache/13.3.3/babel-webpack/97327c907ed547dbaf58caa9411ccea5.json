{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ProxyInfo, WebsocketConnection } from \"../common.browser/Exports\";\nimport { PropertyId } from \"../sdk/Exports\";\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\nimport { WebsocketMessageFormatter } from \"./Exports\";\nimport { HeaderNames } from \"./HeaderNames\";\nexport class IntentConnectionFactory extends ConnectionFactoryBase {\n  create(config, authInfo, connectionId) {\n    let endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint);\n\n    if (!endpoint) {\n      const region = config.parameters.getProperty(PropertyId.SpeechServiceConnection_IntentRegion);\n      const hostSuffix = ConnectionFactoryBase.getHostSuffix(region);\n      const host = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".sr.speech\" + hostSuffix);\n      endpoint = host + \"/speech/recognition/interactive/cognitiveservices/v1\";\n    }\n\n    const queryParams = {\n      format: \"simple\",\n      language: config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage)\n    };\n    this.setCommonUrlParams(config, queryParams, endpoint);\n    const headers = {};\n\n    if (authInfo.token !== undefined && authInfo.token !== \"\") {\n      headers[authInfo.headerName] = authInfo.token;\n    }\n\n    headers[HeaderNames.ConnectionId] = connectionId;\n    config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\n    const enableCompression = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\n    return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\n  }\n\n  getSpeechRegionFromIntentRegion(intentRegion) {\n    switch (intentRegion) {\n      case \"West US\":\n      case \"US West\":\n      case \"westus\":\n        return \"uswest\";\n\n      case \"West US 2\":\n      case \"US West 2\":\n      case \"westus2\":\n        return \"uswest2\";\n\n      case \"South Central US\":\n      case \"US South Central\":\n      case \"southcentralus\":\n        return \"ussouthcentral\";\n\n      case \"West Central US\":\n      case \"US West Central\":\n      case \"westcentralus\":\n        return \"uswestcentral\";\n\n      case \"East US\":\n      case \"US East\":\n      case \"eastus\":\n        return \"useast\";\n\n      case \"East US 2\":\n      case \"US East 2\":\n      case \"eastus2\":\n        return \"useast2\";\n\n      case \"West Europe\":\n      case \"Europe West\":\n      case \"westeurope\":\n        return \"europewest\";\n\n      case \"North Europe\":\n      case \"Europe North\":\n      case \"northeurope\":\n        return \"europenorth\";\n\n      case \"Brazil South\":\n      case \"South Brazil\":\n      case \"southbrazil\":\n        return \"brazilsouth\";\n\n      case \"Australia East\":\n      case \"East Australia\":\n      case \"eastaustralia\":\n        return \"australiaeast\";\n\n      case \"Southeast Asia\":\n      case \"Asia Southeast\":\n      case \"southeastasia\":\n        return \"asiasoutheast\";\n\n      case \"East Asia\":\n      case \"Asia East\":\n      case \"eastasia\":\n        return \"asiaeast\";\n\n      default:\n        return intentRegion;\n    }\n  }\n\n} //# sourceMappingURL=IntentConnectionFactory.js.map","map":null,"metadata":{},"sourceType":"module"}