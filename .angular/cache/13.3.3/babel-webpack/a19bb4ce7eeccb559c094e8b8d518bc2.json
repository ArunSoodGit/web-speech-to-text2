{"ast":null,"code":"import { RestConfigBase, RestMessageAdapter, RestRequestType } from \"../common.browser/Exports\";\nimport { PropertyId } from \"../sdk/Exports\";\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\nimport { HeaderNames } from \"./HeaderNames\";\n/**\n * Implements methods for speaker recognition classes, sending requests to endpoint\n * and parsing response into expected format\n * @class SynthesisRestAdapter\n */\n\nexport class SynthesisRestAdapter {\n  constructor(config) {\n    let endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\n\n    if (!endpoint) {\n      const region = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"westus\");\n      const hostSuffix = ConnectionFactoryBase.getHostSuffix(region);\n      endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, `https://${region}.tts.speech${hostSuffix}`);\n    }\n\n    this.privUri = `${endpoint}/cognitiveservices/voices/list`;\n    const options = RestConfigBase.requestOptions;\n    options.headers[RestConfigBase.configParams.subscriptionKey] = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\n    this.privRestAdapter = new RestMessageAdapter(options);\n  }\n  /**\n   * Sends list voices request to endpoint.\n   * @function\n   * @public\n   * @param connectionId - guid for connectionId\n   * @returns {Promise<IRestResponse>} rest response to status request\n   */\n\n\n  getVoicesList(connectionId) {\n    this.privRestAdapter.setHeaders(HeaderNames.ConnectionId, connectionId);\n    return this.privRestAdapter.request(RestRequestType.Get, this.privUri);\n  }\n\n} //# sourceMappingURL=SynthesisRestAdapter.js.map","map":null,"metadata":{},"sourceType":"module"}