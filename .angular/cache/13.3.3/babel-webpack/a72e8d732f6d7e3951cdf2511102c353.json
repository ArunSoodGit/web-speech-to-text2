{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { RecognitionResult } from \"./Exports\";\n/**\n * Defines result of speech recognition.\n * @class SpeechRecognitionResult\n */\n\nexport class SpeechRecognitionResult extends RecognitionResult {\n  /**\n   * Creates and initializes an instance of this class.\n   * @constructor\n   * @public\n   * @param {string} resultId - The result id.\n   * @param {ResultReason} reason - The reason.\n   * @param {string} text - The recognized text.\n   * @param {number} duration - The duration.\n   * @param {number} offset - The offset into the stream.\n   * @param {string} language - Primary Language detected, if provided.\n   * @param {string} languageDetectionConfidence - Primary Language confidence (\"Unknown,\" \"Low,\" \"Medium,\" \"High\"...), if provided.\n   * @param {string} speakerId - speaker id for conversation transcription, if provided.\n   * @param {string} errorDetails - Error details, if provided.\n   * @param {string} json - Additional Json, if provided.\n   * @param {PropertyCollection} properties - Additional properties, if provided.\n   */\n  constructor(resultId, reason, text, duration, offset, language, languageDetectionConfidence, speakerId, errorDetails, json, properties) {\n    super(resultId, reason, text, duration, offset, language, languageDetectionConfidence, errorDetails, json, properties);\n    this.privSpeakerId = speakerId;\n  }\n  /**\n   * speaker id from conversation transcription/id scenarios\n   * @member SpeechRecognitionResult.prototype.speakerId\n   * @function\n   * @public\n   * @returns {string} id of speaker in given result\n   */\n\n\n  get speakerId() {\n    return this.privSpeakerId;\n  }\n\n} //# sourceMappingURL=SpeechRecognitionResult.js.map","map":null,"metadata":{},"sourceType":"module"}