{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n/* eslint-disable max-classes-per-file */\nimport { CancellationErrorCodePropertyName } from \"../common.speech/Exports\";\nimport { Contracts } from \"./Contracts\";\nimport { CancellationDetailsBase, CancellationErrorCode, CancellationReason, PropertyCollection, PropertyId, ResultReason } from \"./Exports\";\nexport var SpeakerRecognitionResultType = /*#__PURE__*/(() => {\n  (function (SpeakerRecognitionResultType) {\n    SpeakerRecognitionResultType[SpeakerRecognitionResultType[\"Verify\"] = 0] = \"Verify\";\n    SpeakerRecognitionResultType[SpeakerRecognitionResultType[\"Identify\"] = 1] = \"Identify\";\n  })(SpeakerRecognitionResultType || (SpeakerRecognitionResultType = {}));\n\n  return SpeakerRecognitionResultType;\n})();\n\n/**\n * Output format\n * @class SpeakerRecognitionResult\n */\nexport class SpeakerRecognitionResult {\n  constructor(resultType, data, profileId, resultReason = ResultReason.RecognizedSpeaker) {\n    this.privProperties = new PropertyCollection();\n    this.privReason = resultReason;\n\n    if (this.privReason !== ResultReason.Canceled) {\n      if (resultType === SpeakerRecognitionResultType.Identify) {\n        const json = JSON.parse(data);\n        Contracts.throwIfNullOrUndefined(json, \"JSON\");\n        this.privProfileId = json.identifiedProfile.profileId;\n        this.privScore = json.identifiedProfile.score;\n      } else {\n        const json = JSON.parse(data);\n        Contracts.throwIfNullOrUndefined(json, \"JSON\");\n        this.privScore = json.score;\n\n        if (json.recognitionResult.toLowerCase() !== \"accept\") {\n          this.privReason = ResultReason.NoMatch;\n        }\n\n        if (profileId !== undefined && profileId !== \"\") {\n          this.privProfileId = profileId;\n        }\n      }\n    } else {\n      const json = JSON.parse(data);\n      Contracts.throwIfNullOrUndefined(json, \"JSON\");\n      this.privErrorDetails = json.statusText;\n      this.privProperties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.ServiceError]);\n    }\n\n    this.privProperties.setProperty(PropertyId.SpeechServiceResponse_JsonResult, data);\n  }\n\n  get properties() {\n    return this.privProperties;\n  }\n\n  get reason() {\n    return this.privReason;\n  }\n\n  get profileId() {\n    return this.privProfileId;\n  }\n\n  get errorDetails() {\n    return this.privErrorDetails;\n  }\n\n  get score() {\n    return this.privScore;\n  }\n\n}\n/**\n * @class SpeakerRecognitionCancellationDetails\n */\n\nexport class SpeakerRecognitionCancellationDetails extends CancellationDetailsBase {\n  constructor(reason, errorDetails, errorCode) {\n    super(reason, errorDetails, errorCode);\n  }\n  /**\n   * Creates an instance of SpeakerRecognitionCancellationDetails object for the canceled SpeakerRecognitionResult\n   * @member SpeakerRecognitionCancellationDetails.fromResult\n   * @function\n   * @public\n   * @param {SpeakerRecognitionResult} result - The result that was canceled.\n   * @returns {SpeakerRecognitionCancellationDetails} The cancellation details object being created.\n   */\n\n\n  static fromResult(result) {\n    const reason = CancellationReason.Error;\n    let errorCode = CancellationErrorCode.NoError;\n\n    if (!!result.properties) {\n      errorCode = CancellationErrorCode[result.properties.getProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.NoError])];\n    }\n\n    return new SpeakerRecognitionCancellationDetails(reason, result.errorDetails, errorCode);\n  }\n\n} //# sourceMappingURL=SpeakerRecognitionResult.js.map","map":null,"metadata":{},"sourceType":"module"}