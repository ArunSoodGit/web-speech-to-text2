{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}; // eslint-disable-next-line max-classes-per-file\n\n\nimport { RecognizerConfig } from \"../../common.speech/Exports\";\nimport { BackgroundEvent, Events, Timeout } from \"../../common/Exports\";\nimport { Contracts } from \"../../sdk/Contracts\";\nimport { Connection, Recognizer } from \"../../sdk/Exports\";\nimport { ConversationConnectionFactory } from \"./ConversationConnectionFactory\";\nimport { ConversationServiceAdapter } from \"./ConversationServiceAdapter\";\nexport class ConversationRecognizerFactory {\n  static fromConfig(conversation, speechConfig, audioConfig) {\n    return new ConversationTranslatorRecognizer(conversation, speechConfig, audioConfig);\n  }\n\n}\n/**\n * Sends messages to the Conversation Translator websocket and listens for incoming events containing websocket messages.\n * Based off the recognizers in the SDK folder.\n */\n\nexport class ConversationTranslatorRecognizer extends Recognizer {\n  constructor(conversation, speechConfig, audioConfig) {\n    const serviceConfigImpl = speechConfig;\n    Contracts.throwIfNull(serviceConfigImpl, \"speechConfig\");\n    const conversationImpl = conversation;\n    Contracts.throwIfNull(conversationImpl, \"conversationImpl\");\n    super(audioConfig, serviceConfigImpl.properties, new ConversationConnectionFactory());\n    this.privConversation = conversationImpl;\n    this.privIsDisposed = false;\n    this.privProperties = serviceConfigImpl.properties.clone();\n    this.privConnection = Connection.fromRecognizer(this);\n    this.privSetTimeout = typeof Blob !== \"undefined\" && typeof Worker !== \"undefined\" ? Timeout.setTimeout : setTimeout;\n    this.privClearTimeout = typeof Blob !== \"undefined\" && typeof Worker !== \"undefined\" ? Timeout.clearTimeout : clearTimeout;\n  }\n\n  set connected(cb) {\n    this.privConnection.connected = cb;\n  }\n\n  set disconnected(cb) {\n    this.privConnection.disconnected = cb;\n  }\n  /**\n   * Return the speech language used by the recognizer\n   */\n\n\n  get speechRecognitionLanguage() {\n    return this.privSpeechRecognitionLanguage;\n  }\n  /**\n   * Return the properties for the recognizer\n   */\n\n\n  get properties() {\n    return this.privProperties;\n  }\n\n  isDisposed() {\n    return this.privIsDisposed;\n  }\n  /**\n   * Connect to the recognizer\n   * @param token\n   */\n\n\n  connect(token, cb, err) {\n    try {\n      Contracts.throwIfDisposed(this.privIsDisposed);\n      Contracts.throwIfNullOrWhitespace(token, \"token\");\n      this.privReco.conversationTranslatorToken = token;\n      this.resetConversationTimeout();\n      this.privReco.connectAsync(cb, err);\n    } catch (error) {\n      if (!!err) {\n        if (error instanceof Error) {\n          const typedError = error;\n          err(typedError.name + \": \" + typedError.message);\n        } else {\n          err(error);\n        }\n      }\n    }\n  }\n  /**\n   * Disconnect from the recognizer\n   */\n\n\n  disconnect(cb, err) {\n    try {\n      Contracts.throwIfDisposed(this.privIsDisposed);\n\n      if (this.privTimeoutToken !== undefined) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        this.privClearTimeout(this.privTimeoutToken);\n      }\n\n      this.privReco.disconnect().then(() => {\n        if (!!cb) {\n          cb();\n        }\n      }, error => {\n        if (!!err) {\n          err(error);\n        }\n      });\n    } catch (error) {\n      if (!!err) {\n        if (error instanceof Error) {\n          const typedError = error;\n          err(typedError.name + \": \" + typedError.message);\n        } else {\n          err(error);\n        }\n      } // Destroy the recognizer.\n\n\n      this.dispose(true).catch(reason => {\n        Events.instance.onEvent(new BackgroundEvent(reason));\n      });\n    }\n  }\n  /**\n   * Send the mute all participants command to the websocket\n   * @param conversationId\n   * @param participantId\n   * @param isMuted\n   */\n\n\n  sendRequest(command, cb, err) {\n    try {\n      Contracts.throwIfDisposed(this.privIsDisposed);\n      this.sendMessage(command, cb, err);\n    } catch (error) {\n      if (!!err) {\n        if (error instanceof Error) {\n          const typedError = error;\n          err(typedError.name + \": \" + typedError.message);\n        } else {\n          err(error);\n        }\n      } // Destroy the recognizer.\n\n\n      this.dispose(true).catch(reason => {\n        Events.instance.onEvent(new BackgroundEvent(reason));\n      });\n    }\n  }\n  /**\n   * Close and dispose the recognizer\n   */\n\n\n  close() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.privIsDisposed) {\n        if (!!this.privConnection) {\n          this.privConnection.closeConnection();\n          this.privConnection.close();\n        }\n\n        this.privConnection = undefined;\n        yield this.dispose(true);\n      }\n    });\n  }\n  /**\n   * Dispose the recognizer\n   * @param disposing\n   */\n\n\n  dispose(disposing) {\n    const _super = Object.create(null, {\n      dispose: {\n        get: () => super.dispose\n      }\n    });\n\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.privIsDisposed) {\n        return;\n      }\n\n      if (disposing) {\n        if (this.privTimeoutToken !== undefined) {\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n          this.privClearTimeout(this.privTimeoutToken);\n        }\n\n        this.privIsDisposed = true;\n\n        if (!!this.privConnection) {\n          this.privConnection.closeConnection();\n          this.privConnection.close();\n          this.privConnection = undefined;\n        }\n\n        yield _super.dispose.call(this, disposing);\n      }\n    });\n  }\n  /**\n   * Create the config for the recognizer\n   * @param speechConfig\n   */\n\n\n  createRecognizerConfig(speechConfig) {\n    return new RecognizerConfig(speechConfig, this.privProperties);\n  }\n  /**\n   * Create the service recognizer.\n   * The audio source is redundnant here but is required by the implementation.\n   * @param authentication\n   * @param connectionFactory\n   * @param audioConfig\n   * @param recognizerConfig\n   */\n\n\n  createServiceRecognizer(authentication, connectionFactory, audioConfig, recognizerConfig) {\n    const audioSource = audioConfig;\n    return new ConversationServiceAdapter(authentication, connectionFactory, audioSource, recognizerConfig, this);\n  }\n\n  sendMessage(msg, cb, err) {\n    const withAsync = this.privReco;\n\n    const PromiseToEmptyCallback = (promise, cb, err) => {\n      if (promise !== undefined) {\n        promise.then(() => {\n          try {\n            if (!!cb) {\n              cb();\n            }\n          } catch (e) {\n            if (!!err) {\n              err(`'Unhandled error on promise callback: ${e}'`);\n            }\n          }\n        }, reason => {\n          try {\n            if (!!err) {\n              err(reason);\n            } // eslint-disable-next-line no-empty\n\n          } catch (error) {}\n        });\n      } else {\n        if (!!err) {\n          err(\"Null promise\");\n        }\n      }\n    };\n\n    PromiseToEmptyCallback(withAsync.sendMessageAsync(msg), cb, err);\n    this.resetConversationTimeout();\n  }\n\n  resetConversationTimeout() {\n    if (this.privTimeoutToken !== undefined) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      this.privClearTimeout(this.privTimeoutToken);\n    }\n\n    this.privTimeoutToken = this.privSetTimeout(() => {\n      this.sendRequest(this.privConversation.getKeepAlive());\n    }, 60000);\n  }\n\n} //# sourceMappingURL=ConversationTranslatorRecognizer.js.map","map":null,"metadata":{},"sourceType":"module"}