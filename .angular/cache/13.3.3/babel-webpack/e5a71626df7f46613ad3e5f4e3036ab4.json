{"ast":null,"code":"//\n// Copyright (c) Microsoft. All rights reserved.\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\n//\n// eslint-disable-next-line max-classes-per-file\nimport { HeaderNames } from \"../common.speech/HeaderNames\";\nimport { MessageType } from \"../common/Exports\";\nimport { PropertyCollection } from \"./PropertyCollection\";\nimport { PropertyId } from \"./PropertyId\";\n/**\n * ConnectionMessage represents implementation specific messages sent to and received from\n * the speech service. These messages are provided for debugging purposes and should not\n * be used for production use cases with the Azure Cognitive Services Speech Service.\n * Messages sent to and received from the Speech Service are subject to change without\n * notice. This includes message contents, headers, payloads, ordering, etc.\n * Added in version 1.11.0.\n */\n\nexport class ConnectionMessage {}\nexport class ConnectionMessageImpl {\n  constructor(message) {\n    this.privConnectionMessage = message;\n    this.privProperties = new PropertyCollection();\n\n    if (!!this.privConnectionMessage.headers[HeaderNames.ConnectionId]) {\n      this.privProperties.setProperty(PropertyId.Speech_SessionId, this.privConnectionMessage.headers[HeaderNames.ConnectionId]);\n    }\n\n    Object.keys(this.privConnectionMessage.headers).forEach(header => {\n      this.privProperties.setProperty(header, this.privConnectionMessage.headers[header]);\n    });\n  }\n  /**\n   * The message path.\n   */\n\n\n  get path() {\n    return this.privConnectionMessage.headers[Object.keys(this.privConnectionMessage.headers).find(key => key.toLowerCase() === \"path\".toLowerCase())];\n  }\n  /**\n   * Checks to see if the ConnectionMessage is a text message.\n   * See also IsBinaryMessage().\n   */\n\n\n  get isTextMessage() {\n    return this.privConnectionMessage.messageType === MessageType.Text;\n  }\n  /**\n   * Checks to see if the ConnectionMessage is a binary message.\n   * See also GetBinaryMessage().\n   */\n\n\n  get isBinaryMessage() {\n    return this.privConnectionMessage.messageType === MessageType.Binary;\n  }\n  /**\n   * Gets the text message payload. Typically the text message content-type is\n   * application/json. To determine other content-types use\n   * Properties.GetProperty(\"Content-Type\").\n   */\n\n\n  get TextMessage() {\n    return this.privConnectionMessage.textBody;\n  }\n  /**\n   * Gets the binary message payload.\n   */\n\n\n  get binaryMessage() {\n    return this.privConnectionMessage.binaryBody;\n  }\n  /**\n   * A collection of properties and their values defined for this <see cref=\"ConnectionMessage\"/>.\n   * Message headers can be accessed via this collection (e.g. \"Content-Type\").\n   */\n\n\n  get properties() {\n    return this.privProperties;\n  }\n  /**\n   * Returns a string that represents the connection message.\n   */\n\n\n  toString() {\n    return \"\";\n  }\n\n} //# sourceMappingURL=ConnectionMessage.js.map","map":null,"metadata":{},"sourceType":"module"}