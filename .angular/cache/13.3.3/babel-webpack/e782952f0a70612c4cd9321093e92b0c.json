{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { Context, OS, SpeakerIdMessageAdapter, SpeakerRecognitionConfig } from \"../common.speech/Exports\";\nimport { Contracts } from \"./Contracts\";\nimport { PropertyId, ResultReason, SpeakerIdentificationModel, SpeakerRecognitionResult, SpeakerRecognitionResultType, SpeakerVerificationModel } from \"./Exports\";\n/**\n * Defines SpeakerRecognizer class for Speaker Recognition\n * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)\n * @class SpeakerRecognizer\n */\n\nexport class SpeakerRecognizer {\n  /**\n   * SpeakerRecognizer constructor.\n   * @constructor\n   * @param {SpeechConfig} speechConfig - An set of initial properties for this recognizer (authentication key, region, &c)\n   */\n  constructor(speechConfig, audioConfig) {\n    const speechConfigImpl = speechConfig;\n    Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\n    this.privAudioConfigImpl = audioConfig;\n    Contracts.throwIfNull(this.privAudioConfigImpl, \"audioConfig\");\n    this.privProperties = speechConfigImpl.properties.clone();\n    this.implSRSetup();\n  }\n  /**\n   * Gets the authorization token used to communicate with the service.\n   * @member SpeakerRecognizer.prototype.authorizationToken\n   * @function\n   * @public\n   * @returns {string} Authorization token.\n   */\n\n\n  get authorizationToken() {\n    return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n  }\n  /**\n   * Gets/Sets the authorization token used to communicate with the service.\n   * @member SpeakerRecognizer.prototype.authorizationToken\n   * @function\n   * @public\n   * @param {string} token - Authorization token.\n   */\n\n\n  set authorizationToken(token) {\n    Contracts.throwIfNullOrWhitespace(token, \"token\");\n    this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\n  }\n  /**\n   * The collection of properties and their values defined for this SpeakerRecognizer.\n   * @member SpeakerRecognizer.prototype.properties\n   * @function\n   * @public\n   * @returns {PropertyCollection} The collection of properties and their values defined for this SpeakerRecognizer.\n   */\n\n\n  get properties() {\n    return this.privProperties;\n  }\n  /**\n   * Get recognition result for model using given audio\n   * @member SpeakerRecognizer.prototype.recognizeOnceAsync\n   * @function\n   * @public\n   * @async\n   * @param {SpeakerIdentificationModel} model Model containing Voice Profiles to be identified\n   * @param cb - Callback invoked once result is returned.\n   * @param err - Callback invoked in case of an error.\n   */\n\n\n  recognizeOnceAsync(model) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (model instanceof SpeakerIdentificationModel) {\n        const responsePromise = this.privAdapter.identifySpeaker(model, this.privAudioConfigImpl);\n        return this.getResult(responsePromise, SpeakerRecognitionResultType.Identify, undefined);\n      } else if (model instanceof SpeakerVerificationModel) {\n        const responsePromise = this.privAdapter.verifySpeaker(model, this.privAudioConfigImpl);\n        return this.getResult(responsePromise, SpeakerRecognitionResultType.Verify, model.voiceProfile.profileId);\n      } else {\n        throw new Error(\"SpeakerRecognizer.recognizeOnce: Unexpected model type\");\n      }\n    });\n  }\n  /**\n   * Included for compatibility\n   * @member SpeakerRecognizer.prototype.close\n   * @function\n   * @public\n   */\n\n\n  close() {\n    return;\n  } // Does class setup, swiped from Recognizer.\n\n\n  implSRSetup() {\n    let osPlatform = typeof window !== \"undefined\" ? \"Browser\" : \"Node\";\n    let osName = \"unknown\";\n    let osVersion = \"unknown\";\n\n    if (typeof navigator !== \"undefined\") {\n      osPlatform = osPlatform + \"/\" + navigator.platform;\n      osName = navigator.userAgent;\n      osVersion = navigator.appVersion;\n    }\n\n    const recognizerConfig = new SpeakerRecognitionConfig(new Context(new OS(osPlatform, osName, osVersion)), this.privProperties);\n    this.privAdapter = new SpeakerIdMessageAdapter(recognizerConfig);\n  }\n\n  getResult(responsePromise, resultType, profileId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const response = yield responsePromise;\n      return new SpeakerRecognitionResult(resultType, response.data, profileId, response.ok ? ResultReason.RecognizedSpeaker : ResultReason.Canceled);\n    });\n  }\n\n} //# sourceMappingURL=SpeakerRecognizer.js.map","map":null,"metadata":{},"sourceType":"module"}