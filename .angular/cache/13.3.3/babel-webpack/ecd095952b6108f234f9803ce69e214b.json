{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n/* eslint-disable max-classes-per-file */\nimport { PropertyId } from \"../sdk/Exports\";\nexport var RecognitionMode = /*#__PURE__*/(() => {\n  (function (RecognitionMode) {\n    RecognitionMode[RecognitionMode[\"Interactive\"] = 0] = \"Interactive\";\n    RecognitionMode[RecognitionMode[\"Conversation\"] = 1] = \"Conversation\";\n    RecognitionMode[RecognitionMode[\"Dictation\"] = 2] = \"Dictation\";\n  })(RecognitionMode || (RecognitionMode = {}));\n\n  return RecognitionMode;\n})();\nexport var SpeechResultFormat = /*#__PURE__*/(() => {\n  (function (SpeechResultFormat) {\n    SpeechResultFormat[SpeechResultFormat[\"Simple\"] = 0] = \"Simple\";\n    SpeechResultFormat[SpeechResultFormat[\"Detailed\"] = 1] = \"Detailed\";\n  })(SpeechResultFormat || (SpeechResultFormat = {}));\n\n  return SpeechResultFormat;\n})();\nexport class RecognizerConfig {\n  constructor(speechServiceConfig, parameters) {\n    this.privSpeechServiceConfig = speechServiceConfig ? speechServiceConfig : new SpeechServiceConfig(new Context(null));\n    this.privParameters = parameters;\n    this.privMaxRetryCount = parseInt(parameters.getProperty(\"SPEECH-Error-MaxRetryCount\", \"4\"), 10);\n    this.privLanguageIdPriority = parameters.getProperty(PropertyId.SpeechServiceConnection_ContinuousLanguageIdPriority, undefined);\n    this.privLanguageIdMode = this.privLanguageIdPriority === \"Latency\" ? \"DetectContinuous\" : \"DetectAtAudioStart\";\n\n    if (this.privLanguageIdMode === \"DetectAtAudioStart\") {\n      this.privLanguageIdPriority = parameters.getProperty(PropertyId.SpeechServiceConnection_AtStartLanguageIdPriority, undefined);\n    }\n  }\n\n  get parameters() {\n    return this.privParameters;\n  }\n\n  get recognitionMode() {\n    return this.privRecognitionMode;\n  }\n\n  set recognitionMode(value) {\n    this.privRecognitionMode = value;\n    this.privRecognitionActivityTimeout = value === RecognitionMode.Interactive ? 8000 : 25000;\n    this.privSpeechServiceConfig.Recognition = RecognitionMode[value];\n  }\n\n  get SpeechServiceConfig() {\n    return this.privSpeechServiceConfig;\n  }\n\n  get recognitionActivityTimeout() {\n    return this.privRecognitionActivityTimeout;\n  }\n\n  get isContinuousRecognition() {\n    return this.privRecognitionMode !== RecognitionMode.Interactive;\n  }\n\n  get languageIdPriority() {\n    return !!this.privLanguageIdPriority ? `Prioritize${this.privLanguageIdPriority}` : \"\";\n  }\n\n  get languageIdMode() {\n    return this.privLanguageIdMode;\n  }\n\n  get autoDetectSourceLanguages() {\n    return this.parameters.getProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, undefined);\n  }\n\n  get recognitionEndpointVersion() {\n    return this.parameters.getProperty(PropertyId.SpeechServiceConnection_RecognitionEndpointVersion, undefined);\n  }\n\n  get sourceLanguageModels() {\n    const models = [];\n    let modelsExist = false;\n\n    if (this.autoDetectSourceLanguages !== undefined) {\n      for (const language of this.autoDetectSourceLanguages.split(\",\")) {\n        const customProperty = language + PropertyId.SpeechServiceConnection_EndpointId.toString();\n        const modelId = this.parameters.getProperty(customProperty, undefined);\n\n        if (modelId !== undefined) {\n          models.push({\n            language,\n            endpoint: modelId\n          });\n          modelsExist = true;\n        } else {\n          models.push({\n            language,\n            endpoint: \"\"\n          });\n        }\n      }\n    }\n\n    return modelsExist ? models : undefined;\n  }\n\n  get maxRetryCount() {\n    return this.privMaxRetryCount;\n  }\n\n} // The config is serialized and sent as the Speech.Config\n\nexport class SpeechServiceConfig {\n  constructor(context) {\n    this.context = context;\n  }\n\n  serialize() {\n    return JSON.stringify(this, (key, value) => {\n      if (value && typeof value === \"object\") {\n        const replacement = {};\n\n        for (const k in value) {\n          if (Object.hasOwnProperty.call(value, k)) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            replacement[k && k.charAt(0).toLowerCase() + k.substring(1)] = value[k];\n          }\n        }\n\n        return replacement;\n      }\n\n      return value;\n    });\n  }\n\n  get Context() {\n    return this.context;\n  }\n\n  get Recognition() {\n    return this.recognition;\n  }\n\n  set Recognition(value) {\n    this.recognition = value.toLowerCase();\n  }\n\n}\nexport class Context {\n  constructor(os) {\n    this.system = new System();\n    this.os = os;\n  }\n\n}\nexport class System {\n  constructor() {\n    // Note: below will be patched for official builds.\n    const SPEECHSDK_CLIENTSDK_VERSION = \"1.21.0\";\n    this.name = \"SpeechSDK\";\n    this.version = SPEECHSDK_CLIENTSDK_VERSION;\n    this.build = \"JavaScript\";\n    this.lang = \"JavaScript\";\n  }\n\n}\nexport class OS {\n  constructor(platform, name, version) {\n    this.platform = platform;\n    this.name = name;\n    this.version = version;\n  }\n\n}\nexport class Device {\n  constructor(manufacturer, model, version) {\n    this.manufacturer = manufacturer;\n    this.model = model;\n    this.version = version;\n  }\n\n}\nexport var connectivity = /*#__PURE__*/(() => {\n  (function (connectivity) {\n    connectivity[\"Bluetooth\"] = \"Bluetooth\";\n    connectivity[\"Wired\"] = \"Wired\";\n    connectivity[\"WiFi\"] = \"WiFi\";\n    connectivity[\"Cellular\"] = \"Cellular\";\n    connectivity[\"InBuilt\"] = \"InBuilt\";\n    connectivity[\"Unknown\"] = \"Unknown\";\n  })(connectivity || (connectivity = {}));\n\n  return connectivity;\n})();\nexport var type = /*#__PURE__*/(() => {\n  (function (type) {\n    type[\"Phone\"] = \"Phone\";\n    type[\"Speaker\"] = \"Speaker\";\n    type[\"Car\"] = \"Car\";\n    type[\"Headset\"] = \"Headset\";\n    type[\"Thermostat\"] = \"Thermostat\";\n    type[\"Microphones\"] = \"Microphones\";\n    type[\"Deskphone\"] = \"Deskphone\";\n    type[\"RemoteControl\"] = \"RemoteControl\";\n    type[\"Unknown\"] = \"Unknown\";\n    type[\"File\"] = \"File\";\n    type[\"Stream\"] = \"Stream\";\n  })(type || (type = {}));\n\n  return type;\n})(); //# sourceMappingURL=RecognizerConfig.js.map","map":null,"metadata":{},"sourceType":"module"}