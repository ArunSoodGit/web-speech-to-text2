{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ProxyInfo, WebsocketConnection } from \"../common.browser/Exports\";\nimport { PropertyId } from \"../sdk/Exports\";\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\nimport { WebsocketMessageFormatter } from \"./Exports\";\nimport { HeaderNames } from \"./HeaderNames\";\nimport { QueryParameterNames } from \"./QueryParameterNames\";\nexport class TranslationConnectionFactory extends ConnectionFactoryBase {\n  create(config, authInfo, connectionId) {\n    let endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\n\n    if (!endpoint) {\n      const region = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\n      const hostSuffix = ConnectionFactoryBase.getHostSuffix(region);\n      const host = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".s2s.speech\" + hostSuffix);\n      endpoint = host + \"/speech/translation/cognitiveservices/v1\";\n    }\n\n    const queryParams = {\n      from: config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\n      to: config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages)\n    };\n    this.setCommonUrlParams(config, queryParams, endpoint);\n    this.setUrlParameter(PropertyId.SpeechServiceResponse_TranslationRequestStablePartialResult, QueryParameterNames.StableTranslation, config, queryParams, endpoint);\n    const voiceName = \"voice\";\n    const featureName = \"features\";\n\n    if (config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined) !== undefined) {\n      queryParams[voiceName] = config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice);\n      queryParams[featureName] = \"texttospeech\";\n    }\n\n    const headers = {};\n\n    if (authInfo.token !== undefined && authInfo.token !== \"\") {\n      headers[authInfo.headerName] = authInfo.token;\n    }\n\n    headers[HeaderNames.ConnectionId] = connectionId;\n    config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\n    const enableCompression = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\n    return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\n  }\n\n} //# sourceMappingURL=TranslationConnectionFactory.js.map","map":null,"metadata":{},"sourceType":"module"}